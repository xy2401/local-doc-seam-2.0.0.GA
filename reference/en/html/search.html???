<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>Chapter&nbsp;24.&nbsp;Hibernate Search</title><link rel="stylesheet" href="../shared/css/html.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.65.1"><link rel="home" href="index.html" title="Seam - Contextual Components"><link rel="up" href="index.html" title="Seam - Contextual Components"><link rel="previous" href="spring.html" title="Chapter&nbsp;23.&nbsp;Spring Framework integration"><link rel="next" href="configuration.html" title="Chapter&nbsp;25.&nbsp;Configuring Seam and packaging Seam applications"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">Chapter&nbsp;24.&nbsp;Hibernate Search</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="spring.html">Prev</a>&nbsp;</td><th width="60%" align="center">&nbsp;</th><td width="20%" align="right">&nbsp;<a accesskey="n" href="configuration.html">Next</a></td></tr></table><hr></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a name="search"></a>Chapter&nbsp;24.&nbsp;Hibernate Search</h2></div></div><div></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e13229"></a>24.1.&nbsp;Introduction</h2></div></div><div></div></div><p>Full text search engines like Apache Lucene&#8482; are a very powerful
    technology to bring free text/efficient queries to applications. If
    suffers several mismatches when dealing with an object domain model
    (keeping the index up to date, mismatch between the index structure and
    the domain model, querying mismatch...) Hibernate Search indexes your
    domain model thanks to a few annotations, takes care of the database /
    index synchronization and brings you back regular managed objects from
    free text queries. Hibernate Search is using Apache Lucene under the
    cover.</p><p>Hibernate Search has been designed to integrates nicely and as
    naturally as possible with JPA and Hibernate. As a natural extension,
    JBoss Seam provides an Hibernate Search integration.</p><p>Please refer to the <a href="???" target="_top">Hibernate Search
    documentation</a> for information specific to the Hibernate Search
    project.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e13241"></a>24.2.&nbsp;Configuration</h2></div></div><div></div></div><p>Hibernate Search is configured either in the
    <tt class="filename">META-INF/persistence.xml</tt> or
    <tt class="filename">hibernate.cfg.xml</tt> file.</p><p>Hibernate Search configuration has sensible defaults for most
    configuration parameters, Here is a description of the minimal
    configuration to get started.</p><pre class="programlisting">   &lt;persistence-unit name="sample"&gt;
      &lt;jta-data-source&gt;java:/DefaultDS&lt;/jta-data-source&gt;
      &lt;properties&gt;
         [...]
         <span class="bold"><b>&lt;!-- use a file system based index --&gt;
         &lt;property name="hibernate.search.default.directory_provider" 
                   value="org.hibernate.search.store.FSDirectoryProvider"/&gt;
         &lt;!-- directory where the indexes will be stored --&gt;
         &lt;property name="hibernate.search.default.indexBase" 
                   value="/Users/prod/apps/dvdstore/dvdindexes"/&gt;</b></span>
      &lt;/properties&gt;
   &lt;/persistence-unit&gt;</pre><p>If you plan to target Hibernate Annotations or EntityManager 3.2.x
    (embedded into JBoss AS 4.2.GA), you also need to configure the
    appropriate event listeners.</p><pre class="programlisting">   &lt;persistence-unit name="sample"&gt;
      &lt;jta-data-source&gt;java:/DefaultDS&lt;/jta-data-source&gt;
      &lt;properties&gt;
         [...]
         &lt;!-- use a file system based index --&gt;
         &lt;property name="hibernate.search.default.directory_provider" 
                   value="org.hibernate.search.store.FSDirectoryProvider"/&gt;
         &lt;!-- directory where the indexes will be stored --&gt;
         &lt;property name="hibernate.search.default.indexBase" 
                   value="/Users/prod/apps/dvdstore/dvdindexes"/&gt;

         <span class="bold"><b>&lt;property name="hibernate.ejb.event.post-insert" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;
         &lt;property name="hibernate.ejb.event.post-update" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;
         &lt;property name="hibernate.ejb.event.post-delete" 
                   value="org.hibernate.search.event.FullTextIndexEventListener"/&gt;</b></span>

      &lt;/properties&gt;
   &lt;/persistence-unit&gt;</pre><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This step is no longer useful if Hibernate Annotation or
      EntityManager 3.3.x are used.</p></div><p>In addition to the configuration file, the following jars have to be
    deployed:</p><div class="itemizedlist"><ul type="disc"><li><p>hibernate-search.jar</p></li><li><p>hibernate-commons-annotations.jar</p></li><li><p>lucene-core.jar</p></li></ul></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>If you deploy those in a EAR, don't forget to update
      <tt class="filename">application.xml</tt></p></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e13286"></a>24.3.&nbsp;Usage</h2></div></div><div></div></div><p>Hibernate Search uses annotations to map entities to a Lucene index,
    check the <a href="http://www.hibernate.org/hib_docs/search/reference/en/html_single/" target="_top">reference
    documentation</a> for more informations.</p><p>Hibernate Search is fully integrated with the API and semantic of
    JPA / Hibernate. Switching from a HQL or Criteria based query requires
    just a few lines of code. The main API the application interacts with is
    the <tt class="classname">FullTextSession</tt> API (subclass of Hibernate's
    <tt class="classname">Session</tt>).</p><p>When Hibernate Search is present, JBoss Seam injects a
    <tt class="classname">FullTextSession</tt>.</p><pre class="programlisting">@Stateful
@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @In
   <span class="bold"><b>FullTextSession session;</b></span>

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      org.hibernate.Query query session.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .list();
   }
   [...]
}  

</pre><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p><tt class="classname">FullTextSession</tt> extends
      <tt class="classname">org.hibernate.Session</tt> so that it can be used as a
      regular Hibernate Session</p></div><p>If the Java Persistence API is used, a smoother integration is
    proposed.</p><pre class="programlisting">@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @In
   <span class="bold"><b>FullTextEntityManager em;</b></span>

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      javax.persistence.Query query = em.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .getResultList();
   }
   [...]
}  </pre><p>When Hibernate Search is present, a
    <tt class="classname">FulltextEntityManager</tt> is injected.
    <tt class="classname">FullTextEntityManager</tt> extends
    <tt class="classname">EntityManager</tt> with search specific methods, the
    same way <tt class="classname">FullTextSession</tt> extends
    <tt class="classname">Session</tt>.</p><p>When an EJB 3.0 Session or Message Driven Bean injection is used (ie
    Bean using @PersistenceContext), it is not possible to replace the
    <tt class="classname">EntityManager</tt> interface by the
    <tt class="classname">FullTextEntityManager</tt> interface in the declaration
    statement. However, the implementation injected will be a
    <tt class="classname">FullTextEntityManager</tt> implementation: downcasting
    is then possible.</p><pre class="programlisting">@Stateful
@Name("search")
public class FullTextSearchAction implements FullTextSearch, Serializable
{   
   @PersistenceContext
   EntityManager em;

   public void search(String searchString) {
      org.apache.lucene.query.Query luceneQuery = getLuceneQuery();
      <span class="bold"><b>FullTextEntityManager ftEm = (FullTextEntityManager) em;</b></span>
      javax.persistence.Query query = ftEm.createFullTextQuery(luceneQuery, Product.class);
      searchResults = query
            .setMaxResults(pageSize + 1)
            .setFirstResult(pageSize * currentPage)
            .getResultList();
   }
   [...]
}  </pre><p></p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>For people accustomed to Hibernate Search out of Seam, note that
      using <tt class="methodname">Search.createFullTextSession</tt> is not
      necessary.</p></div><p>Check the DVDStore or the blog examples of the JBoss Seam
    distribution for a concrete use of Hibernate Search.</p></div></div><div class="navfooter"><hr><table width="100%" summary="Navigation footer"><tr><td width="40%" align="left"><a accesskey="p" href="spring.html">Prev</a>&nbsp;</td><td width="20%" align="center"><a accesskey="u" href="index.html">Up</a></td><td width="40%" align="right">&nbsp;<a accesskey="n" href="configuration.html">Next</a></td></tr><tr><td width="40%" align="left" valign="top">Chapter&nbsp;23.&nbsp;Spring Framework integration&nbsp;</td><td width="20%" align="center"><a accesskey="h" href="index.html">Home</a></td><td width="40%" align="right" valign="top">&nbsp;Chapter&nbsp;25.&nbsp;Configuring Seam and packaging Seam applications</td></tr></table></div></body></html>